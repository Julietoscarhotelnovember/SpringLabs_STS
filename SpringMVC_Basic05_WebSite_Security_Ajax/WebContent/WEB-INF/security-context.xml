<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:security="http://www.springframework.org/schema/security"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
						   http://www.springframework.org/schema/beans/spring-beans.xsd
						   http://www.springframework.org/schema/security
						   http://www.springframework.org/schema/security/spring-security.xsd">

<!-- 
	1단계 인증 권한 테스트: in memory 방식
	db없이 메모리에서
	auto-config="true": 스프링 시큐리티 제공 환경설정 그대로 쓴다
					  : 자동화된 로그인 폼 제공(분석)
	실적용은 db사용하는 방식으로 가야 한다
-->
<!-- <security:http auto-config="true">
	<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
	<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/>
</security:http>
<security:authentication-manager>
	<security:authentication-provider>
		<security:user-service>
			<security:user name="kglim" password="1004" authorities="ROLE_USER"/>
			<security:user name="admin" password="1004" authorities="ROLE_USER, ROLE_ADMIN"/>
		</security:user-service>
	</security:authentication-provider>
</security:authentication-manager> -->

<!-- 
	2단계 테스트
	1.로그인화면 사용자 정의
	2.login.jsp 제어 
	3.logout 처리
	<security:http>
		<security:csrf disabled="true"/> 보안관련
		<security:form-login login-page="/joinus/login.htm"
							 authentication-failure-url="/joinus/login.htm?error"/>
		<security:logout logout-success-url="/index.htm"/>
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/>
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="kglim" password="1004" authorities="ROLE_USER"/>
				<security:user name="admin" password="1004" authorities="ROLE_USER, ROLE_ADMIN"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
-->
<!--
	3단계 jdbc 연동
	테이블 구성하고, db로 정보를 얻어와서 인증과 권한 처리
	roll테이블 생성(권한정보)
-->
<security:http>
	<security:csrf disabled="true"/><!-- 보안관련 -->
	<security:form-login login-page="/joinus/login.htm"
						 authentication-failure-url="/joinus/login.htm?error"/>
	<security:logout logout-success-url="/index.htm"/>
	<!-- 
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/>
	-->
	<security:intercept-url pattern="/customer/*Reg.htm" access="hasRole('ROLE_ADMIN')"/>
	<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>		
</security:http>
<security:authentication-manager>
	<security:authentication-provider>
		<security:jdbc-user-service data-source-ref="driverManagerDataSource"
			users-by-username-query="SELECT USERID,
									pwd AS PASSWORD,
									1 enabled
									FROM member WHERE userid=?"
			authorities-by-username-query="select m.userid, r.ROLE_NAME 
										  from member m join roll r
										  on m.userid = r.userid
										  where m.userid=?"
		/>
	</security:authentication-provider>
</security:authentication-manager>


</beans>